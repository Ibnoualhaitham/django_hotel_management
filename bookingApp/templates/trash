{% extends 'navbar.html' %}
{% load static %}

{% block content %}
<div class="container mt-5">
  <h1 class="display-5 fw-bold text-center mb-4">Find your next stay</h1>

  <!-- Add New Hotel Button -->
  <div class="mb-4 text-end">
    <a href="{% url 'hotel_create' %}" class="btn btn-primary">+ Add New Hotel</a>
  </div>

  {% if hotels %}
  <div id="hotelCarousel" class="carousel slide carousel-dark" data-bs-ride="carousel">
    <div class="carousel-inner">

      {% for hotel in hotels %}
        {% if forloop.counter0|divisibleby:3 %}
        <div class="carousel-item {% if forloop.first %}active{% endif %}">
          <div class="row justify-content-center">
        {% endif %}

        <div class="col-md-4 mb-4">
          <div class="card h-100 shadow-sm border-0 rounded-4 clickable-card" style="cursor:pointer;">

            <!-- Hotel Image -->
            {% with hotel.images.all|first as hotel_image %}
              {% if hotel_image %}
                <img src="{{ hotel_image.image.url }}" class="card-img-top rounded-top-4"
                     style="height: 230px; object-fit: cover;" alt="{{ hotel.name }}" loading="lazy" />
              {% else %}
                <img src="{% static 'default_hotel.jpg' %}" class="card-img-top rounded-top-4"
                     style="height: 230px; object-fit: cover;" alt="No image available" loading="lazy" />
              {% endif %}
            {% endwith %}

            <div class="card-body">
              <h5 class="card-title">{{ hotel.name }}</h5>
              <p class="card-text text-muted small mb-1">
                <i class="bi bi-geo-alt-fill"></i> {{ hotel.address }}
              </p>
              <p class="card-text small">{{ hotel.description|truncatechars:100 }}</p>

              <!-- Rating & Reviews -->
              <div class="d-flex align-items-center mb-2">
                <span class="badge bg-success me-2">
                  â˜… {{ hotel.get_average_rating|default:"0"|floatformat:1 }}
                </span>
                <small class="text-muted">{{ hotel.review_set.count }} reviews</small>
              </div>

              <!-- Status badge -->
              {% if hotel.status == 'available' %}
                <span class="badge bg-primary">Available</span>
              {% elif hotel.status == 'booked' %}
                <span class="badge bg-secondary">Booked</span>
              {% elif hotel.status == 'under_maintenance' %}
                <span class="badge bg-warning text-dark">Under Maintenance</span>
              {% elif hotel.status == 'closed' %}
                <span class="badge bg-danger">Closed</span>
              {% endif %}

              {% if hotel.is_getaway_deal %}
                <div class="badge bg-warning text-dark mt-2">Getaway Deal</div>
              {% endif %}

              <!-- Amenities -->
              <p class="mt-2 mb-1"><strong>{{ hotel.nights }} nights stay</strong></p>
              <p class="mb-2 small text-muted">
                <i class="bi bi-wifi"></i> Free Wi-Fi &nbsp; | &nbsp;
                <i class="bi bi-cup-hot"></i> Breakfast &nbsp; | &nbsp;
                <i class="bi bi-car-front"></i> Parking
              </p>

              <!-- Action buttons -->
              <div class="mt-3 d-flex flex-wrap justify-content-between align-items-center gap-2">
                <a href="{% url 'hotel_detail' hotel.pk %}" class="btn btn-outline-primary btn-sm">View Details</a>

                {% if hotel.status == 'available' %}
                  <a href="{% url 'book_hotel' hotel.pk %}" class="btn btn-success btn-sm">Book Now</a>
                {% else %}
                  <button class="btn btn-secondary btn-sm" disabled>Unavailable</button>
                {% endif %}

                <a href="{% url 'hotel_update' hotel.pk %}" class="btn btn-warning btn-sm">Edit</a>
                <a href="{% url 'hotel_delete' hotel.pk %}" class="btn btn-outline-danger btn-sm">Delete</a>
              </div>
            </div>
          </div>
        </div>

        {% if forloop.counter|divisibleby:3 or forloop.last %}
          </div>
        </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Carousel Controls -->
    {% if hotels|length > 12 %}
    <button class="carousel-control-prev" type="button" data-bs-target="#hotelCarousel" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#hotelCarousel" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
    {% endif %}
  </div>
  {% else %}
    <p class="text-center text-muted">No hotels found.</p>
  {% endif %}
</div>

<!-- JavaScript to fix clickable card behavior -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carouselElement = document.querySelector('#hotelCarousel');
    const bootstrapCarousel = bootstrap.Carousel.getInstance(carouselElement) || new bootstrap.Carousel(carouselElement);

    document.querySelectorAll('#hotelCarousel .clickable-card').forEach(card => {
      card.addEventListener('click', function(e) {
        if (e.target.closest('a') || e.target.closest('button')) return;
        bootstrapCarousel.next();
      });
    });
  });
</script>
{% endblock %}


////////////////////////////hotel_detail.html code /////////////////////

{% extends 'navbar.html' %}
{% load static %}

{% block content %}
<div class="container my-5">

  <!-- ðŸ”· HOTEL MAIN CARD -->
  <div class="card shadow-lg border-0 rounded-4 mb-5">
    <div class="row g-0">
      <div class="col-md-6">
        {% with hotel.images.all|first as hotel_image %}
          {% if hotel_image %}
            <img src="{{ hotel_image.image.url }}"
                 class="img-fluid h-100 w-100 rounded-start-4"
                 style="object-fit: cover;" alt="{{ hotel.name }}">
          {% else %}
            <img src="{% static 'images/default_hotel.jpg' %}"
                 class="img-fluid h-100 w-100 rounded-start-4"
                 style="object-fit: cover;" alt="Default Hotel">
          {% endif %}
        {% endwith %}
      </div>
      <div class="col-md-6 p-4 d-flex flex-column justify-content-between">
        <div>
          <div class="d-flex justify-content-between align-items-start mb-3">
            <h2 class="fw-bold">{{ hotel.name }}</h2>
            <a href="{% url 'room_create' hotel.pk %}" class="btn btn-primary btn-sm">
              <i class="bi bi-plus-circle"></i> Add Room
            </a>
          </div>
          <p class="mb-1"><strong>Address:</strong> {{ hotel.address }}</p>
          <p>{{ hotel.description }}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- ðŸ”¶ ROOMS SECTION -->
  <h4 class="mb-3">Available Rooms</h4>
  {% if hotel.room.all %}
    <div class="row g-4 mb-5">
      {% for room in hotel.room.all %}
        <div class="col-md-4">
          <div class="card h-100 shadow-sm border-0 rounded-4">
            {% with room.images.all|first as room_image %}
              {% if room_image %}
                <img src="{{ room_image.image.url }}" class="card-img-top rounded-top-4"
                     style="height: 200px; object-fit: cover;" alt="{{ room.name }}">
              {% else %}
                <img src="{% static 'images/default_room.jpg' %}" class="card-img-top rounded-top-4"
                     style="height: 200px; object-fit: cover;" alt="Room">
              {% endif %}
            {% endwith %}

            <div class="card-body">
              <h5 class="card-title">{{ room.name }}</h5>
              <ul class="list-unstyled small">
                <li class="mb-1">
                  <i class="bi bi-door-closed-fill text-primary"></i>
                  <strong>Room #:</strong> {{ room.room_number }}
                </li>
                <li class="mb-1">
                  <i class="bi bi-building text-secondary"></i>
                  <strong>Type:</strong> {{ room.room_type|title }}
                </li>
                <li class="mb-1">
                  <i class="bi bi-currency-dollar text-success"></i>
                  <strong>Price:</strong>
                  <span class="badge bg-success">${{ room.price }}</span>
                </li>
                <li class="mb-1">
                  <i class="bi bi-check-circle-fill text-success"></i>
                  <strong>Available:</strong>
                  {% if room.is_available %}
                    <span class="badge bg-primary">Yes</span>
                  {% else %}
                    <span class="badge bg-danger">No</span>
                  {% endif %}
                </li>
              </ul>
            </div>

            <div class="card-footer d-flex justify-content-between align-items-center bg-white border-top-0">
              <a href="{% url 'book_hotel' hotel.pk %}" class="btn btn-success btn-sm">
                <i class="bi bi-calendar-check"></i> Book Now
              </a>
              <a style="margin-left:16vh;" href="{% url 'room_update' room.pk %}" class="btn btn-warning btn-sm">
                <i class="bi bi-pencil-square"></i> Edit
              </a>
              <a href="{% url 'room_delete' room.pk %}" class="btn btn-danger btn-sm">
                <i class="bi bi-trash"></i> Delete
              </a>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <p class="text-muted">No rooms available yet.</p>
  {% endif %}

  <!-- ðŸ”¶ REVIEWS SECTION -->
  <h4 class="mb-3">Guest Reviews</h4>
  {% if reviews %}
    <div class="row g-3">
      {% for review in reviews %}
        <div class="col-md-4">
          <div class="card shadow-sm border-0 rounded-4 h-100">
            <div class="card-body">
              <div class="d-flex justify-content-between mb-2">
                <strong>{{ review.user.username }}</strong>
                <span class="text-warning fw-bold">â˜… {{ review.star_rating }}</span>
              </div>
              <p class="card-text small">{{ review.comment }}</p>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <p class="text-muted">No reviews yet.</p>
  {% endif %}

</div>
{% endblock %}



//////////////////// views.py code //////////////////////

from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import CreateView, TemplateView, ListView, DetailView, UpdateView, DeleteView
from django.urls import reverse_lazy
from django.contrib.auth.views import LoginView, LogoutView
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import login as auth_login
from django.contrib import messages
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin

from .models import Booking, Payment
from hotelApp.models import Hotel, Review, Room, Image
from .forms import RegisterForm, BookingForm, PaymentForm


# --- User Management ---
class RegistrationView(CreateView):
    form_class = RegisterForm
    template_name = 'register.html'
    success_url = reverse_lazy('login')

    def dispatch(self, request, *args, **kwargs):
        if request.user.is_authenticated:
            return redirect('user_profile')
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        user = form.save()
        auth_login(self.request, user)
        messages.success(self.request, 'Registration successful!')
        return redirect(self.success_url)


class UserLoginView(SuccessMessageMixin, LoginView):
    template_name = 'login.html'
    form_class = AuthenticationForm
    success_message = 'Login successful!'

    def get_success_url(self):
        return reverse_lazy('user_profile')


class UserLogoutView(LoginRequiredMixin, LogoutView):
    next_page = reverse_lazy('login')

    def dispatch(self, request, *args, **kwargs):
        messages.success(request, 'Logout successful!')
        return super().dispatch(request, *args, **kwargs)


class UserProfileView(LoginRequiredMixin, TemplateView):
    template_name = 'user_profile.html'


# --- Hotel Views ---
class HotelListView(LoginRequiredMixin, ListView):
    model = Hotel
    template_name = 'hotel_list.html'
    context_object_name = 'hotels'


class HotelDetailView(LoginRequiredMixin, DetailView):
    model = Hotel
    template_name = 'hotel_detail.html'
    context_object_name = 'hotel'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['reviews'] = Review.objects.filter(hotel=self.object)
        return context


class HotelCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Hotel
    fields = ['name', 'description', 'images', 'address', 'mobile', 'email', 'status', 'facilities', 'manager']
    template_name = 'hotel_form.html'
    success_url = reverse_lazy('hotel_list')
    success_message = 'Hotel Created Successfully'


class HotelUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Hotel
    fields = ['name', 'description', 'address', 'mobile', 'email', 'status', 'facilities', 'manager']
    template_name = 'hotel_form.html'
    success_url = reverse_lazy('hotel_list')
    success_message = "Hotel updated successfully."

    def form_valid(self, form):
        response = super().form_valid(form)

        # Delete selected images
        image_ids_to_delete = self.request.POST.getlist('delete_images')
        if image_ids_to_delete:
            images_to_delete = self.object.images.filter(id__in=image_ids_to_delete)
            for img in images_to_delete:
                img.image.delete()  # Delete file
                img.delete()        # Delete object
            self.object.images.remove(*images_to_delete)

        # Add new uploaded images
        for image_file in self.request.FILES.getlist('images'):
            img = Image.objects.create(image=image_file)
            self.object.images.add(img)

        return response


class HotelDeleteView(LoginRequiredMixin, SuccessMessageMixin, DeleteView):
    model = Hotel
    template_name = 'hotel_confirm_delete.html'
    success_url = reverse_lazy('hotel_list')
    success_message = "Hotel deleted successfully."


# --- Room Views ---
class RoomCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):
    model = Room
    fields = ['room_number', 'room_type', 'is_available', 'price']
    template_name = 'room_form.html'
    success_message = 'Room created successfully.'

    def dispatch(self, request, *args, **kwargs):
        self.hotel = get_object_or_404(Hotel, pk=self.kwargs['pk'])
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        form.instance.hotel = self.hotel
        response = super().form_valid(form)
        for image_file in self.request.FILES.getlist('images'):
            img = Image.objects.create(image=image_file)
            self.object.images.add(img)
        return response

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['hotel_object'] = self.hotel
        return context

    def get_success_url(self):
        return reverse_lazy('hotel_detail', kwargs={'pk': self.hotel.pk})


class RoomUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Room
    fields = ['room_number', 'room_type', 'is_available', 'price']
    template_name = 'room_form.html'
    success_message = "Room updated successfully."

    def form_valid(self, form):
        response = super().form_valid(form)
        self.object.images.clear()
        for image_file in self.request.FILES.getlist('images'):
            img = Image.objects.create(image=image_file)
            self.object.images.add(img)
        return response

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['hotel_object'] = self.object.hotel
        return context

    def get_success_url(self):
        return reverse_lazy('hotel_detail', kwargs={'pk': self.object.hotel.pk})


class RoomDeleteView(LoginRequiredMixin, SuccessMessageMixin, DeleteView):
    model = Room
    template_name = 'room_confirm_delete.html'
    success_message = "Room deleted successfully."

    def get_success_url(self):
        hotel = self.get_object().hotel
        return reverse_lazy('hotel_detail', kwargs={'pk': hotel.pk})


# --- Booking and Payment ---
class RoomBookingView(LoginRequiredMixin, CreateView):
    model = Booking
    form_class = BookingForm
    template_name = 'booking_form.html'

    def dispatch(self, request, *args, **kwargs):
        self.room = get_object_or_404(Room, pk=kwargs['room_id'])
        if not self.room.is_available:
            messages.error(request, "This room is not available for booking.")
            return redirect('hotel_detail', pk=self.room.hotel.pk)
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        form.instance.user = self.request.user
        form.instance.room = self.room
        form.instance.hotel = self.room.hotel
        form.instance.is_active = True
        messages.success(self.request, "Booking created! Please proceed to payment.")
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['room'] = self.room
        context['hotel'] = self.room.hotel
        return context

    def get_success_url(self):
        return reverse_lazy('make_payment', kwargs={'booking_id': self.object.pk})


class BookingListView(LoginRequiredMixin, ListView):
    model = Booking
    template_name = 'booking_list.html'
    context_object_name = 'bookings'

    def get_queryset(self):
        return Booking.objects.filter(user=self.request.user)


class BookingUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = Booking
    form_class = BookingForm
    template_name = 'booking_form.html'
    success_message = "Booking updated successfully."

    def get_queryset(self):
        return Booking.objects.filter(user=self.request.user)

    def get_success_url(self):
        return reverse_lazy('booking_list')


class BookingDeleteView(LoginRequiredMixin, SuccessMessageMixin, DeleteView):
    model = Booking
    template_name = 'booking_confirm_delete.html'
    success_message = "Booking deleted successfully."

    def get_queryset(self):
        return Booking.objects.filter(user=self.request.user)

    def get_success_url(self):
        return reverse_lazy('booking_list')


class PaymentCreateView(LoginRequiredMixin, CreateView):
    model = Payment
    form_class = PaymentForm
    template_name = 'payment_form.html'
    success_url = reverse_lazy('booking_success')

    def dispatch(self, request, *args, **kwargs):
        self.booking = get_object_or_404(Booking, pk=kwargs['booking_id'], user=request.user)
        return super().dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        form.instance.user = self.request.user
        form.instance.booking = self.booking
        messages.success(self.request, 'Payment completed successfully!')
        return super().form_valid(form)
